{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM/bgA/G3nfaHYEdKHf2seI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":39,"metadata":{"id":"wzH8OMEVX3it","executionInfo":{"status":"ok","timestamp":1674145647660,"user_tz":-330,"elapsed":5,"user":{"displayName":"PAVITHRA R - 20ADA41","userId":"09796280575300786878"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential\n","from keras.layers import Dense, LSTM\n","import math\n","from sklearn.preprocessing import MinMaxScaler"]},{"cell_type":"code","source":["data=pd.read_csv(\"/content/SM_dataset.csv\")\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ye7IhlwfYKu5","executionInfo":{"status":"ok","timestamp":1674145679655,"user_tz":-330,"elapsed":866,"user":{"displayName":"PAVITHRA R - 20ADA41","userId":"09796280575300786878"}},"outputId":"3c11d83a-e572-477a-8f98-4c212bad5cae"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date   open   high    low  close      volume Name\n","0  2013-02-08  15.07  15.12  14.63  14.75   8407500.0  AAL\n","1  2013-02-11  14.89  15.01  14.26  14.46   8882000.0  AAL\n","2  2013-02-12  14.45  14.51  14.10  14.27   8126000.0  AAL\n","3  2013-02-13  14.30  14.94  14.25  14.66  10259500.0  AAL\n","4  2013-02-14  14.94  14.96  13.16  13.99  31879900.0  AAL"],"text/html":["\n","  <div id=\"df-f39e9812-9977-44ed-8fbe-5fd36a2ee561\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>open</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>close</th>\n","      <th>volume</th>\n","      <th>Name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2013-02-08</td>\n","      <td>15.07</td>\n","      <td>15.12</td>\n","      <td>14.63</td>\n","      <td>14.75</td>\n","      <td>8407500.0</td>\n","      <td>AAL</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2013-02-11</td>\n","      <td>14.89</td>\n","      <td>15.01</td>\n","      <td>14.26</td>\n","      <td>14.46</td>\n","      <td>8882000.0</td>\n","      <td>AAL</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2013-02-12</td>\n","      <td>14.45</td>\n","      <td>14.51</td>\n","      <td>14.10</td>\n","      <td>14.27</td>\n","      <td>8126000.0</td>\n","      <td>AAL</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2013-02-13</td>\n","      <td>14.30</td>\n","      <td>14.94</td>\n","      <td>14.25</td>\n","      <td>14.66</td>\n","      <td>10259500.0</td>\n","      <td>AAL</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2013-02-14</td>\n","      <td>14.94</td>\n","      <td>14.96</td>\n","      <td>13.16</td>\n","      <td>13.99</td>\n","      <td>31879900.0</td>\n","      <td>AAL</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f39e9812-9977-44ed-8fbe-5fd36a2ee561')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f39e9812-9977-44ed-8fbe-5fd36a2ee561 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f39e9812-9977-44ed-8fbe-5fd36a2ee561');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","source":[],"metadata":{"id":"go2VXSfY3mCo"}},{"cell_type":"code","source":["all_stock_tick_names = data['Name'].unique()\n","print(all_stock_tick_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ec_6TOddYOUm","executionInfo":{"status":"ok","timestamp":1674145818511,"user_tz":-330,"elapsed":1614,"user":{"displayName":"PAVITHRA R - 20ADA41","userId":"09796280575300786878"}},"outputId":"c52927bc-d7dd-4424-fbcc-e38c4f67cd33"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["['AAL' 'AAPL' 'AAP' 'ABBV' 'ABC' 'ABT' 'ACN' 'ADBE' 'ADI' 'ADM' 'ADP'\n"," 'ADSK' 'ADS' 'AEE' 'AEP' 'AES' 'AET' 'AFL' 'AGN' 'AIG' 'AIV' 'AIZ' 'AJG'\n"," 'AKAM' 'ALB' 'ALGN' 'ALK' 'ALLE' 'ALL' 'ALXN' 'AMAT' 'AMD' 'AME' 'AMGN'\n"," 'AMG' 'AMP' 'AMT' 'AMZN' 'ANDV' 'ANSS' 'ANTM' 'AON' 'AOS' 'APA' 'APC'\n"," 'APD' 'APH' 'APTV' 'ARE' 'ARNC' 'ATVI' 'AVB' 'AVGO' 'AVY' 'AWK' 'AXP'\n"," 'AYI' 'AZO' 'A' 'BAC' 'BAX' 'BA' 'BBT' 'BBY' 'BDX' 'BEN' 'BF.B' 'BHF'\n"," 'BHGE' 'BIIB' 'BK' 'BLK' 'BLL' 'BMY' 'BRK.B' 'BSX' 'BWA' 'BXP' 'CAG'\n"," 'CAH' 'CAT' 'CA' 'CBG' 'CBOE' 'CBS' 'CB' 'CCI' 'CCL' 'CDNS' 'CELG' 'CERN'\n"," 'CFG' 'CF' 'CHD' 'CHK' 'CHRW' 'CHTR' 'CINF' 'CI' 'CLX' 'CL' 'CMA' 'CMCSA'\n"," 'CME' 'CMG' 'CMI' 'CMS' 'CNC' nan]\n"]}]},{"cell_type":"code","source":["# 1. Getting a stock name\n","stock_name = input(\"Enter a Stock Price Name: \")\n","\n","# 2. Extrating all the data having the name same as the stock name entered\n","all_data = data['Name'] == stock_name\n","\n","# 3. Putting all the rows of specific stock in a variable\n","final_data = data[all_data]\n","\n","# 4. Printing first 5 rows of the stock data of a specific stock name\n","final_data.head()"],"metadata":{"id":"zqclkg9EYTnU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#  Plotting date vs the close market stock price\n","final_data.plot('date','close',color=\"red\")\n","\n","# Extract only top 60 rows to make the plot a little clearer\n","new_data = final_data.head(60)\n","\n","#  Plotting date vs the close  market stock price\n","new_data.plot('date','close',color=\"green\")\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":521},"id":"7dBKi00HYWvG","executionInfo":{"status":"ok","timestamp":1674145825190,"user_tz":-330,"elapsed":1569,"user":{"displayName":"PAVITHRA R - 20ADA41","userId":"09796280575300786878"}},"outputId":"ea40ba42-227a-4af7-b5c2-423a2f50f2b7"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# 1. Filter out the closing market price data\n","close_data = final_data.filter(['close'])\n","\n","# 2. Convert the data into array for easy evaluation\n","dataset = close_data.values\n","\n","# 3. Scale/Normalize the data to make all values between 0 and 1\n","scaler = MinMaxScaler(feature_range=(0, 1))\n","scaled_data = scaler.fit_transform(dataset)\n","\n","# 4. Creating training data size : 70% of the data\n","training_data_len = math.ceil(len(dataset) *.7)\n","train_data = scaled_data[0:training_data_len  , : ]\n","\n","# 5. Separating the data into x and y data\n","x_train_data=[]\n","y_train_data =[]\n","for i in range(60,len(train_data)):\n","    x_train_data=list(x_train_data)\n","    y_train_data=list(y_train_data)\n","    x_train_data.append(train_data[i-60:i,0])\n","    y_train_data.append(train_data[i,0])\n","\n","    # 6. Converting the training x and y values to numpy arrays\n","    x_train_data1, y_train_data1 = np.array(x_train_data), np.array(y_train_data)\n","\n","    # 7. Reshaping training s and y data to make the calculations easier\n","    x_train_data2 = np.reshape(x_train_data1, (x_train_data1.shape[0],x_train_data1.shape[1],1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"id":"4sk2zkNpYbzN","executionInfo":{"status":"error","timestamp":1674145733599,"user_tz":-330,"elapsed":783,"user":{"displayName":"PAVITHRA R - 20ADA41","userId":"09796280575300786878"}},"outputId":"4909d428-4302-43f8-b402-3ad4417b6b40"},"execution_count":47,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-4c15312cf5b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# 3. Scale/Normalize the data to make all values between 0 and 1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMinMaxScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeature_range\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mscaled_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# 4. Creating training data size : 70% of the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    850\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    414\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    415\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 416\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    417\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    418\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    451\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    452\u001b[0m         \u001b[0mfirst_pass\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"n_samples_seen_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 453\u001b[0;31m         X = self._validate_data(\n\u001b[0m\u001b[1;32m    454\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    455\u001b[0m             \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfirst_pass\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    564\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 566\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    567\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    568\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    803\u001b[0m         \u001b[0mn_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_num_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    804\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mn_samples\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mensure_min_samples\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 805\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    806\u001b[0m                 \u001b[0;34m\"Found array with %d sample(s) (shape=%s) while a\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    807\u001b[0m                 \u001b[0;34m\" minimum of %d is required%s.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found array with 0 sample(s) (shape=(0, 1)) while a minimum of 1 is required by MinMaxScaler."]}]},{"cell_type":"code","source":["model = Sequential()\n","model.add(LSTM(units=50, return_sequences=True,input_shape=(x_train_data2.shape[1],1)))\n","model.add(LSTM(units=50, return_sequences=False))\n","model.add(Dense(units=25))\n","model.add(Dense(units=1))"],"metadata":{"id":"7e2g5DB-wn8V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='adam', loss='mean_squared_error')\n","model.fit(x_train_data2, y_train_data1, batch_size=1, epochs=1)"],"metadata":{"id":"GRSMxRZdwrlo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. Creating a dataset for testing\n","test_data = scaled_data[training_data_len - 60: , : ]\n","x_test = []\n","y_test =  dataset[training_data_len : , : ]\n","for i in range(60,len(test_data)):\n","    x_test.append(test_data[i-60:i,0])\n","\n","# 2.  Convert the values into arrays for easier computation\n","x_test = np.array(x_test)\n","x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\n","\n","# 3. Making predictions on the testing data\n","predictions = model.predict(x_test)\n","predictions = scaler.inverse_transform(predictions)"],"metadata":{"id":"stTmGELFwvHZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rmse=np.sqrt(np.mean(((predictions- y_test)**2)))\n","print(rmse)"],"metadata":{"id":"B1yayh0-wymi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train = data[:training_data_len]\n","valid = data[training_data_len:]\n","\n","valid['Predictions'] = predictions\n","\n","plt.title('Model')\n","plt.xlabel('Date')\n","plt.ylabel('Close')\n","\n","plt.plot(train['close'])\n","plt.plot(valid[['close', 'Predictions']])\n","\n","plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\n","\n","plt.show()"],"metadata":{"id":"2iBQkGgxw1gN"},"execution_count":null,"outputs":[]}]}